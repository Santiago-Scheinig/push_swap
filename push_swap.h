/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   push_swap.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sscheini <sscheini@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/12/18 15:46:55 by sscheini          #+#    #+#             */
/*   Updated: 2025/02/12 19:40:19 by sscheini         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PUSH_SWAP_H
# define PUSH_SWAP_H
# include "libft/libft.h"
/*--------------------------------------------------------------------------*/
/*-------------------------------TROUBLESHOOT-------------------------------*/
/*--------------------------------------------------------------------------*/

#ifndef ERR_END
# define ERR_END -1
#endif

/* Frees the created stacks, which are a combination of an INT *ptr and a	*/
/* T_LIST **stacks.															*/
void	*ft_stack_free(int *ptr, t_list **stacks);							

/* Frees a CHAR ** array, usually generated by an ft_split() execution.		*/
void	*ft_split_free(char **split);

/* Failsafe specific to push_swap in case of error.							*/
/* - Frees the stacks, which are a combination of an INT * ptr and a		*/
/*	 T_LIST ** stacks, and the CHAR ** lst_instructions.					*/
/* - Returns -1 to indicate an error ocurred.								*/
int	ft_forcend(int *ptr, t_list **stacks, char **order_arr);

/* Verifies that the inputed values recieved as argument follow the next	*/
/* requisites:																*/
/* - Values inputed are numbers.											*/
/* - Numbers inputed are betweeen the MAX_INT and MIN_INT (including them).	*/
/* - Numbers inputed are unique and do not repeat.							*/
/* If all the requisites are true, returns an INT * with all the values.	*/
int	*ft_stack_check(char **argv, int *ptr_len);

/*--------------------------------------------------------------------------*/
/*-------------------------------INSTRUCTIONS-------------------------------*/
/*--------------------------------------------------------------------------*/

# define NO_ORDER -1

/* Pushes the first element from STACK B to STACK A as it's first.			*/
# define PA_ORDER 0

/* Pushes the first element from STACK A to STACK B as it's first.			*/
# define PB_ORDER 1

/* Swaps the first two elements of STACK A.									*/
# define SA_ORDER 2

/* Rotates every element on STACK A one position down, making the last		*/
/* element it's first.														*/
# define RRA_ORDER 3

/* Rotates every element on STACK A one position up, making the first		*/
/* element it's last.														*/
# define RA_ORDER 4

/* Swaps the first two elements of STACK B.									*/
# define SB_ORDER 5

/* Rotates every element on STACK B one position down, making the last		*/
/* element it's first.														*/
# define RRB_ORDER 6

/* Rotates every element on STACK B one position up, making the first		*/
/* element it's last.														*/
# define RB_ORDER 7

/* Swaps the first two elements of both STACKS.								*/
# define SS_ORDER 8

/* Rotates every element on both STACKS one position down, making the last	*/
/* elements their first.													*/
# define RRR_ORDER 9

/* Rotates every element on both STACKS one position up, making the first	*/
/* elements their last.														*/
# define RR_ORDER 10

/* Executes the instruction sent as argument one time with both stack_a		*/
/* and stack_b.																*/
/* - If executed correctly, returns 1. Else, returns 0.						*/
int ft_double_ins(int (*ins)(t_list **), t_list **stack_a, t_list **stack_b);

/* Executes a given instruction and prints it on stdout.					*/
/* - If the instruction isn't valid, returns -1.							*/
int	ft_execute(int instruction, t_list **stacks);

/* Pushes the first element from stack_src to stack_des as it's first.		*/
/* - If executed correctly, returns 1. Else, returns 0.						*/
int ft_push(t_list	**stack_src, t_list **stack_des);

/* Rotates every element on the stack one position down, making the last	*/
/* element it's first.														*/
/* - If executed correctly, returns 1. Else, returns 0.						*/
int	ft_reverse_rotate(t_list **stack);

/* Rotates every element on the stack one position up, making the first		*/
/* element it's last.														*/
/* - If executed correctly, returns 1. Else, returns 0.						*/
int	ft_rotate(t_list **stack);

/* Swaps the first two elements of the stack passed as argument.			*/
/* - If executed correctly, returns 1. Else, returns 0.						*/
int	ft_swap(t_list **stack);

/*--------------------------------------------------------------------------*/
/*--------------------------------ALGORITHMS--------------------------------*/
/*--------------------------------------------------------------------------*/

int	ft_bubblesort(t_list **stacks, char **order_arr, int orientation, int column);

void	ft_quicksort(t_list **stacks, char **order_arr);

void	ft_timsort(t_list **stacks, char **lst_instructions);

int	ft_insertionsort(t_list *stack_des, int nbr, int orientation, int column);

/*--------------------------------------------------------------------------*/
/*----------------------------------UTILITY---------------------------------*/
/*--------------------------------------------------------------------------*/

t_list	*ft_runnext_nbr(t_list *stack, int run);

t_list	*ft_lstnext_nbr(t_list *stack, int nbr, int orientation);

int	ft_getin_position(t_list *stack, int nbr, int column);

int	ft_islimit(t_list *stack, int nbr, int column);

int	ft_check_sort(t_list *stacks, int column);

int	ft_getlimit_nbr(t_list *stack, int orientation);

/////
void	ft_print_stack(t_list **stack);

#endif